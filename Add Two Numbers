/**

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
**/

//PROGRAM
import java.math.*;
 public class ListNode {
      int val;
      ListNode next;
      ListNode() {}
      ListNode(int val) { this.val = val; }
      ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 }
 

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        String num1= "";
        String num2= "";

        while(l1 != null){
            num1=l1.val+num1;
            l1=l1.next;
        }
        
        while(l2 != null){
            num2=l2.val+num2;
            l2=l2.next;
        }
         BigInteger n1 = new BigInteger(num1);
        BigInteger n2 = new BigInteger(num2);
        BigInteger sum = n1.add(n2);
         String str=sum.toString();

         ListNode ll = new ListNode(0);

        ListNode current = ll;
       

        
        return ll.next;
    }
}

class Main{
 public static void main(String[] args) {
        // Create l1 = [2 -> 4 -> 3]
        ListNode l1 = new ListNode(2, new ListNode(4, new ListNode(3)));

        // Create l2 = [5 -> 6 -> 4]
        ListNode l2 = new ListNode(5, new ListNode(6, new ListNode(4)));

        Solution sol = new Solution();
        ListNode result = sol.addTwoNumbers(l1, l2);

        // Print the result linked list
        System.out.print("Output: ");
        while (result != null) {
            System.out.print(result.val);
            if (result.next != null) System.out.print(" -> ");
            result = result.next;
        }
    }
